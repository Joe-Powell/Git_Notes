			
			
			
			
			TOUCH 
				creates new file
				touch style.css 
				
		    OPEN IN VISUAL STUDIO,
				just type code .    enter  while in the directory
			
		1/  right click on file to bash here and be in directory
		2/   must do! git init --INNITIALIZES GIT REPOSITORY

				git status shows what files are staged 
				git config --global user.name 'joe powell'
				git add index.html  you can add changes 
				
				git status 
				git add *.html will commit all .html files to staging
				git rm --cached index.html  removes index.html 
				get add .    will add everything    you can add changes also
				
				so when you make a change to the file, and then check git status,
				it  will show modified ndex.html so just do git add index.html
				or...  git add .   to save changes, it is not commited yet 
				
				
				
			TO COMMIT,wq
					git commit  cant type anymore so click i to go into insert mode
					you must enter a commit message first not commented out to commit 
					you can remove a # comment if you want
					then you can type to get OUT hit esc :wq then enter 
					
					WHEN COMMITING YOU CAN SKIP THE EDIT STAGE in git bash by typing 
						git commit -m 'this is the message'  then enter  this will add the message
						since it must have a message...
					
					so thats how you create a commit to master. any changes you make
					after that and save it, it wont be saved to master unless you commit it.
					even though its changes, its not in git master. 
					when you git add, your adding it to the staging area, then you can
					commit after that.... so first add to staging then add to master after that....
					
					
				
				make files that wont get added to staging .gitignore     traversey 18:10
					touch .gitignore, you cant create in the explorer directory, use cmd or bash
					a file wont get added to the staging area when filename is inside gitignore file 
					for example when you when you git add . // adds all to staging
					touch .gitignore cant create in directory use cmd or bash
					then git add . and youll see that whatever files you type inside will not get staged
					so this is for files we dont want to include into our repository in the staging area that is...
					to put whole folder put folder name 
					if you put *.txt it will  get all .txtfiles
					
					
			BRANCHES  
						CREATE, ADD A NEW BRANCH, AND DELETE 	
					---------------------------------------------------					
					git branch branchname  -- to create then checkout
					git checkout branchname -- to get into that a branch
					then git add .   then git commit -m 'message'   then  git push --set-upstream origin branchname --> your all set!
					git checkout master back to master..
					
					 git branch -->To see all branches 
					  
					 to DELETE it's kinda opposite because you don't want to be in the same branch
					 1> git checkout main or master or other branch   ..you can't be inside the same branch your deleting
					 		2> git branch -d branchname
							3> git push origin :branchname    .. to delete the branch off github itself not just the command line
					 
					------------------------------------------------------------------------------------------------------------------------
					
					 DELETE A REMOTE ?? needs work
					---------------------------------------------------
						to see remotes, type	git branch -M main
					
					TO REMOVE THE REMOTE: git remote rm nameOfRemote-->  ex. = git remote rm heroku
					
					
			
			MERGE
					while in the master branch
					git merge branchname
					press i then add a message then uncommented
					esc :wq  enter
			
			Repository into github
					dont forget to git init first in the computer folder
					so go to github.com, make new repository in hub first, copy and past into the 
					commandline 
					this aint perfect, instructions in the github thingie once you create repo...
					*	git remote add origin https://github.com/Joe-Powell/new.git
					*   git push -u origin master
					* enter uname/password prompt
					then everytime you make changes, youll first 
					*git add .
					 then git commit -m 'added changes' in bash..
						command line message, then esc then :wq    
					 now its added to local computer
					 we havent actually pushed it yet so..
					 then git push 	then it will push right to github
					
			TO CLONE   this is an easy way to clone without having to download a zip
				create folder, open with bash so right click on empty folder then in comand
				line type git clone then paste in clone url inside the code of repository 
		
			PULL is where you make changes on github itself and pull into your computer
					or if  someone sends changes to your github repo and you pulll it in
					
					

	-----------------------------------------------------------------------------------------------------------------------------------------------
	GIT BASH COMMANDS   & ssh digital ocean
	----------------------------------------------------------------------------------
	
	ls   -> see directories
	cd / -> see root directory  
	cd  ->  back to home direcctory
	cd .. -> back one directory
	mkdir test -> Creates a folder names test
	touch  -> makes a file
	rm -> delete a file   rm file1.txt 
	rmdir -> remove a directory    rmdir dir2
	rm -R dir2     ->  if directory has files inside it
	cat -> this is for showing the contents within a file
	less -> shows file only, q to exit..
	pwd -> shows what directory your in
	~ -> from home directory
	clear  -> clears terminal
	
	nano -> commandline text editor   nano gitNotes.txt 
	ctrl x to exit nano
	mv -> rename a file     mv file1.txt file2.txt
	cp -> to copy a file   cp file2.txt filenameOfCopy.txt  
	cat filenameOfCopy.txt   spits out contents to see
	
	copy to other locations
	cp file1.txt ~/dir2/file3.txt
	which -> searches for file or folder location location
	which mongod    // /usr/bin/mongod
	sudo when not logged in as root user
	
	
	
	---------------------------
	cd test   
	touch test.txt   makes a file inside that folder
	---------------------------------------------------
	
	Remove folder
	cd
	rm -rf test
	
	-digital oean tutorial -----------------------------------------------------------------------
	https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-2
	
	change root username
	
	best tutorial
	https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04
	
	
	
	LOGIN SERVER
	----------------------------------
	log into your server in git bash simply enter.. below
	ssh root@167.99.14.249
	sudo apt update
	sudo apt upgrade
	----------------------------------
	
	CREATE NEW USER instead of root
	
	adduser joey
	 password => pword1
	usermod -aG sudo joey
	exit then login with new user

	ssh joey@167.99.14.249
	joey@167.99.14.249: Permission denied (publickey). denied because
	when we added the public key it was added to the root user. 
	so log back in as root
	ssh root@167.99.14.249
	 cd /home/joey
	 mkdir .ssh
	 cd .ssh
	 touch authorized_keys				public keys go inside authorized_keys file
	 to grab keys open another terminal
	 cat .ssh/id_rsa
	 cd c/users/joseph
	 cat .ssh/id_rsa.pub  copy keys
	 then back to main terminal
	 sudo nano authorized_keys
	 past in keys 
	 ctrl x
	 y  enter
	 cat authorized_keys   to see whats inside there
	 exit
	 ssh joey@167.99.14.249
	 all good!
	 
	 
		Disable the Password for Root or username joey Login -> now nobody can login with password,only ssh key
		sudo nano /etc/ssh/sshd_config
		pword1
		then scroll down had to stretch the commandline ...
		or click insie then use arrow key to go down..
		PermitRootLogin no
		ctrl x
		y enter
		sudo systemctl reload sshd.service
		
		
		ssh for github ........wht a mess here
		---------------
		$ ssh-keygen -t rsa   while in server
		
		sudo chown -R joey:joey /home/joey	to make it in joey not root...... see video 42:00 ish  not in the github
		ssh-keygen -t rsa		again because failed
		 ls .ssh
		 git clone git@github.com:bradtraversy/react_otka_auth.git
		 ls
		 cd into the clone and install these below
		 sudo apt install nodejs
		 sudo apt install npm
		 


		
		
		
		
		
		
		
		
		
		
		

		how to clode from github tutorial DigitalOcean
		https://www.digitalocean.com/community/cheatsheets/how-to-use-git-a-reference-guide
		
		Brad Traverseys Guide
		https://gist.github.com/bradtraversy/f03df587f2323b50beb4250520089a9e
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 ===NOT SURE ABOUT THIS ====
	 Copy folder or file from machine to server
	scp files.zip remote_username@IP-ADDRESS:/remote/directory/tocopy
	
	scp ~/test.txt joe@104.131.191.249:~
	ls


	--------------------------------------------------------------------------------------------------------------------------------
	
	
	

					
	==================HOST A REACT PROJECT WITH BUILD
----------------------------------------------------------------------------------------------------------------------------------------
#1 name of domain and folder its in if a subdomain.. under version in package.json
		"homepage": "http://joe-powell.com/portfolio-react",
		
		
		
#2  ctrl c then in directory npm run build..  delete old build if exists



#3  then find that BUILD folder which is inside the folder on your computer of the project itself,
 go inside right click it and select all the
files and folders inside DO NOT turn the build folder itself into a zip...
 right click below files hold in and highlight all files and folders, 
then release right click and send to zip.
and find SEND TO, then select COMPRESSED ZIP FOLDER. 
you can call that new folder build or whatever you want to name it.
so right click and sent to, then select compressed zip folder.
so it's just the build itself that does it...

#4 then go to hosting and find the folder you want to upload it to, choose upload,
then pick that zip folder and upload it inside the folder, go to folder, right click on the zip and extract the zip, delete the zip then	
					
===================================================================================================================================================					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
